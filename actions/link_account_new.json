{
  "version": "3.0.0",
  "form": {
    "name": "Link Account - New",
    "description": null,
    "messages": {
      "custom": {},
      "errors": {}
    },
    "languages": {
      "default": null,
      "primary": "en"
    },
    "translations": {},
    "start": {
      "nextNode": "router_RRgU",
      "coordinates": {
        "x": -80,
        "y": 42
      },
      "hiddenFields": [
        {
          "key": "code",
          "value": null
        },
        {
          "key": "state",
          "value": null
        }
      ]
    },
    "nodes": [
      {
        "id": "step_nndF",
        "type": "STEP",
        "alias": "New step",
        "config": {
          "nextNode": null,
          "components": [
            {
              "id": "rich_text_YYP6",
              "type": "RICH_TEXT",
              "config": {
                "content": "<h2>Link your existing account?</h2><p>We found existing account(s) with {{context.user.email}}.</p><p></p><p>Would you like to link the account to keep your existing order history?</p><p></p><p>You will be prompted to authenticate with the selected account to verify the account linking.</p>"
              },
              "category": "BLOCK"
            },
            {
              "id": "custom_lPld",
              "hint": null,
              "type": "CUSTOM",
              "label": null,
              "config": {
                "css": null,
                "code": "function loginOptions(context) {\n  const CONTAINER_CLASS = 'af-accountLinkingOptions';\n\n  const container = document.createElement('div');\n  container.classList.add(CONTAINER_CLASS);\n\n  function buildAuthorizeUrl(hostname, client_id, code_challenge, nonce, connection, email) {\n    console.log(hostname);\n    console.log(client_id);\n\n    const BASE_URL = 'https://'+hostname;\n    const AUTHORIZE_PATH = '/authorize';\n\n    const AUTHORIZE_URL = new URL(AUTHORIZE_PATH, BASE_URL);\n    AUTHORIZE_URL.searchParams.append('connection', connection);\n    AUTHORIZE_URL.searchParams.append('login_hint', email);\n    AUTHORIZE_URL.searchParams.append('screen_hint', 'login');\n    AUTHORIZE_URL.searchParams.append('client_id', client_id);\n    AUTHORIZE_URL.searchParams.append('response_type', 'code');\n    AUTHORIZE_URL.searchParams.append('response_mode', 'query');\n    AUTHORIZE_URL.searchParams.append('prompt', 'login');\n    AUTHORIZE_URL.searchParams.append('nonce', nonce);\n    AUTHORIZE_URL.searchParams.append('account_linking', 'true');\n    AUTHORIZE_URL.searchParams.append('scope', 'openid profile email');\n    AUTHORIZE_URL.searchParams.append('redirect_uri', window.location.href);\n\t\tAUTHORIZE_URL.searchParams.append('code_challenge_method', 'S256');\n    AUTHORIZE_URL.searchParams.append('code_challenge', code_challenge);\n\t\t\n\n    return AUTHORIZE_URL.href;\n  }\n\n  function buildButton(href, text) {\n    const button = document.createElement('button');\n    button.classList.add('af-button', 'af-nextButton', 'af-customButton');\n    button.onclick= function() { location.href=href; }\n    button.innerText = `Continue with ${text}`;\n\n    return button;\n  }\n\n  function buildLoginOptions(hostname, client_id, code_challenge, nonce, matching_accounts) {\n    // @todo: generate options dynamically\n    const ALLOWED_LOGIN_OPTIONS = matching_accounts;\n  \n    ALLOWED_LOGIN_OPTIONS.forEach((option) => {\n      const href = buildAuthorizeUrl(hostname, client_id, code_challenge, nonce, option.identities[0].connection, option.email);\n      \nlet x = option.identities[0].connection;\nvar text;\nswitch (x) {\n\tcase \"Username-Password-Authentication\":\n\ttext = \"password\";\n\tbreak;\n\tcase \"email\":\n\t\ttext = \"OTP via email\";\n\t\tbreak;\n\tcase \"sms\":\n\t\ttext = \"OTP via phone\";\n\t\tbreak;\n\tcase \"facebook\":\n\t\ttext = \"Facebook\";\n\t\tbreak;\n\tcase \"apple\":\n\t\ttext = \"Apple\";\n\t\tbreak;\n\tcase \"google-oauth2\":\n\t\ttext = \"Google\";\n\t\tbreak;\n\tdefault:\n\t\ttext = \"password\";\n}\n      \n      const button = buildButton(href, text);\n  \n      container.appendChild(button);\n    });\n  }\n\n\n  return {\n    init() {\n      \n      const config = context.custom.getParams();\n  \t\tconst { hostname, client_id, code_challenge, nonce, matching_accounts } = config;\n      buildLoginOptions(hostname, client_id, code_challenge, nonce, matching_accounts);\n      return container;\n    },\n  };\n}",
                "params": {
                  "nonce": "{{vars.nonce}}",
                  "hostname": "{{meta.navigation.location.hostname}}",
                  "client_id": "{{context.client.client_id}}",
                  "code_challenge": "{{vars.code_challenge}}",
                  "matching_accounts": "{{vars.matching_accounts}}"
                },
                "schema": {}
              },
              "category": "FIELD",
              "required": false,
              "transient": false
            },
            {
              "id": "divider_iR0h",
              "type": "DIVIDER",
              "config": {
                "text": null
              },
              "category": "BLOCK"
            },
            {
              "id": "jump_button_Dfsx",
              "type": "JUMP_BUTTON",
              "config": {
                "text": "Skip this step",
                "style": {
                  "backgroundColor": "#808080"
                },
                "stepId": "$ending"
              },
              "category": "BLOCK"
            }
          ]
        },
        "coordinates": {
          "x": 867,
          "y": -192
        }
      },
      {
        "id": "router_RRgU",
        "type": "ROUTER",
        "alias": "InAccountLinking",
        "config": {
          "rules": [
            {
              "id": "id_6098372030682",
              "alias": "LinkInProgress",
              "nextNode": "flow_zeMp",
              "condition": {
                "operands": [
                  {
                    "operands": [
                      "{{fields.code}}"
                    ],
                    "operator": "HAS_VALUE"
                  }
                ],
                "operator": "AND"
              }
            },
            {
              "id": "id_5932907032988",
              "alias": "HasMatchingAccounts",
              "nextNode": "step_nndF",
              "condition": {
                "operands": [
                  {
                    "operands": [
                      "{{ functions.length('{{vars.matching_accounts}}') }}",
                      "0"
                    ],
                    "operator": "GT"
                  }
                ],
                "operator": "AND"
              }
            }
          ],
          "fallback": "$ending"
        },
        "coordinates": {
          "x": 192,
          "y": 64
        }
      },
      {
        "id": "flow_zeMp",
        "type": "FLOW",
        "alias": "SetAuthCode",
        "config": {
          "flowId": "#FLOW-1#",
          "nextNode": "$ending"
        },
        "coordinates": {
          "x": 671,
          "y": 389
        }
      }
    ],
    "ending": {
      "content": null,
      "redirection": null,
      "callback": null,
      "afterSubmit": {
        "email": null,
        "flowId": null
      },
      "coordinates": {
        "x": 1447,
        "y": 331
      },
      "resumeFlow": true
    },
    "social": [],
    "style": {
      "css": null,
      "theme": "ROUND",
      "version": "MODERN"
    },
    "tags": []
  },
  "flows": {
    "#FLOW-1#": {
      "name": "SetAuthCode",
      "description": null,
      "actions": [
        {
          "id": "SetAuthCode",
          "type": "FLOW",
          "alias": null,
          "notes": null,
          "action": "STORE_STATE",
          "params": {
            "data": {
              "code": "{{meta.navigation.location.searchParams.code}}",
              "redirect_uri": "{{meta.navigation.location.protocol}}//{{meta.navigation.location.hostname}}{{meta.navigation.location.pathname}}"
            }
          },
          "maskOutput": false,
          "allowFailure": false
        }
      ],
      "triggers": {
        "webhook": {
          "secret": null,
          "enabled": false
        }
      },
      "synchronous": true,
      "security": {
        "rateLimits": []
      }
    }
  },
  "connections": {}
}